import java.util.ArrayList;
import java.util.List;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;


interface Observer {
    void update(String mensagem, String remetente);
    String getNome();
}

class Mensagem {
    private String conteudo;
    private String remetente;
    private LocalDateTime horario;
    
    public Mensagem(String conteudo, String remetente) {
        this.conteudo = conteudo;
        this.remetente = remetente;
        this.horario = LocalDateTime.now();
    }
    
    @Override
    public String toString() {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        return String.format("[%s] %s: %s", 
            horario.format(formatter), remetente, conteudo);
    }
}

class ChatRoom {
    private String nome;
    private List<Observer> usuarios;
    private List<Mensagem> historico;
    
    public ChatRoom(String nome) {
        this.nome = nome;
        this.usuarios = new ArrayList<>();
        this.historico = new ArrayList<>();
        System.out.println("üí¨ Sala de chat '" + nome + "' criada!");
    }
    

    public void registrarUsuario(Observer usuario) {
        usuarios.add(usuario);
        System.out.println("‚úÖ " + usuario.getNome() + " entrou na sala '" + nome + "'");
        notificarTodos("entrou na sala", usuario.getNome());
    }
    

    public void removerUsuario(Observer usuario) {
        if (usuarios.remove(usuario)) {
            System.out.println("‚ùå " + usuario.getNome() + " saiu da sala '" + nome + "'");
            notificarTodos("saiu da sala", usuario.getNome());
        }
    }
    

    public void enviarMensagem(String mensagem, String remetente) {
        System.out.println("\nüì§ " + remetente + " enviou: " + mensagem);
        
        Mensagem msg = new Mensagem(mensagem, remetente);
        historico.add(msg);
        
        notificarTodos(mensagem, remetente);
    }
    

    private void notificarTodos(String mensagem, String remetente) {
        for (Observer usuario : usuarios) {
            if (!usuario.getNome().equals(remetente) || 
                mensagem.equals("entrou na sala") || 
                mensagem.equals("saiu da sala")) {
                usuario.update(mensagem, remetente);
            }
        }
    }
    

    public void exibirHistorico() {
        System.out.println("\nüìú HIST√ìRICO DA SALA '" + nome + "':");
        System.out.println("=====================================");
        if (historico.isEmpty()) {
            System.out.println("Nenhuma mensagem ainda.");
        } else {
            for (Mensagem msg : historico) {
                System.out.println(msg);
            }
        }
        System.out.println("=====================================\n");
    }
    

    public int getNumeroUsuarios() {
        return usuarios.size();
    }
    

    public void listarUsuariosOnline() {
        System.out.println("\nüë• Usu√°rios online na sala '" + nome + "': " + usuarios.size());
        for (Observer usuario : usuarios) {
            System.out.println("  ‚Ä¢ " + usuario.getNome());
        }
    }
}

class UsuarioChat implements Observer {
    private String nome;
    private boolean silenciado;
    
    public UsuarioChat(String nome) {
        this.nome = nome;
        this.silenciado = false;
    }
    
    @Override
    public void update(String mensagem, String remetente) {
        if (!silenciado) {
            if (mensagem.equals("entrou na sala") || mensagem.equals("saiu da sala")) {
                System.out.println("  üîî " + nome + " foi notificado: " + 
                    remetente + " " + mensagem);
            } else {
                System.out.println("  üì® " + nome + " recebeu: [" + mensagem + "] de " + 
                    remetente);
            }
        }
    }
    
    @Override
    public String getNome() {
        return nome;
    }
    

    public void alternarSilencio() {
        silenciado = !silenciado;
        System.out.println(nome + (silenciado ? " silenciou" : " ativou") + 
            " as notifica√ß√µes");
    }
    

    public void enviarMensagem(ChatRoom sala, String mensagem) {
        sala.enviarMensagem(mensagem, nome);
    }
}

// Classe principal para demonstra√ß√£o
public class Main {
    public static void main(String[] args) {
        System.out.println("=== SISTEMA DE CHAT - PADR√ÉO OBSERVER ===\n");
        
        // Criar salas de chat
        ChatRoom salaGeral = new ChatRoom("Geral");
        ChatRoom salaTech = new ChatRoom("Tecnologia");
        
        // Criar usu√°rios
        UsuarioChat alice = new UsuarioChat("Alice");
        UsuarioChat bob = new UsuarioChat("Bob");
        UsuarioChat carlos = new UsuarioChat("Carlos");
        UsuarioChat diana = new UsuarioChat("Diana");
        
        // Cen√°rio 1: Usu√°rios entrando na sala geral
        System.out.println("\n--- Usu√°rios entrando na sala ---");
        salaGeral.registrarUsuario(alice);
        salaGeral.registrarUsuario(bob);
        salaGeral.registrarUsuario(carlos);
        
        // Listar usu√°rios online
        salaGeral.listarUsuariosOnline();
        
        // Cen√°rio 2: Enviando mensagens
        System.out.println("\n--- Conversa√ß√£o no chat ---");
        alice.enviarMensagem(salaGeral, "Ol√° pessoal! Como est√£o?");
        bob.enviarMensagem(salaGeral, "Oi Alice! Tudo bem e voc√™?");
        carlos.enviarMensagem(salaGeral, "E a√≠ galera! Acabei de chegar");
        
        // Cen√°rio 3: Novo usu√°rio entra
        System.out.println("\n--- Novo usu√°rio chegando ---");
        salaGeral.registrarUsuario(diana);
        diana.enviarMensagem(salaGeral, "Oi gente! Sou nova aqui üòä");
        
        // Cen√°rio 4: Usu√°rio saindo
        System.out.println("\n--- Usu√°rio saindo ---");
        salaGeral.removerUsuario(bob);
        
        // Cen√°rio 5: Mensagem ap√≥s sa√≠da
        alice.enviarMensagem(salaGeral, "Tchau Bob! Foi bom falar com voc√™");
        
        // Exibir hist√≥rico
        salaGeral.exibirHistorico();
        
        // Cen√°rio 6: Segunda sala de chat
        System.out.println("\n--- Segunda sala: Tecnologia ---");
        salaTech.registrarUsuario(alice);
        salaTech.registrarUsuario(carlos);
        
        alice.enviarMensagem(salaTech, "Algu√©m aqui programa em Java?");
        carlos.enviarMensagem(salaTech, "Eu! Estou estudando padr√µes de design");
        alice.enviarMensagem(salaTech, "Legal! Observer √© muito √∫til");
        
        // Cen√°rio 7: Demonstrar silenciar notifica√ß√µes
        System.out.println("\n--- Silenciando notifica√ß√µes ---");
        carlos.alternarSilencio();
        alice.enviarMensagem(salaTech, "Carlos, voc√™ ainda est√° a√≠?");
        
        // Listar usu√°rios e exibir hist√≥rico da sala tech
        salaTech.listarUsuariosOnline();
        salaTech.exibirHistorico();
        
        // Status final
        System.out.println("\n--- Status Final ---");
        System.out.println("Sala Geral tem " + salaGeral.getNumeroUsuarios() + " usu√°rios");
        System.out.println("Sala Tecnologia tem " + salaTech.getNumeroUsuarios() + " usu√°rios");
    }
}